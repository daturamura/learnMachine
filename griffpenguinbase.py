# -*- coding: utf-8 -*-
"""griffPenguinBase.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lN6q6RWc74fkoSYHQWFTuKCbev-E50Ug
"""

import requests
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn import datasets
from sklearn.inspection import DecisionBoundaryDisplay
from sklearn.metrics import matthews_corrcoef 

pengUrl = "https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv"

#pengContent = requests.get(pengUrl).content

pengData = pd.read_csv(pengUrl, header=0)


species = pengData['species'].values
island = pengData['island'].values
billLengthMM = pengData['bill_length_mm'].values
billDepthMM = pengData['bill_depth_mm'].values
flipperLengthMM = pengData['flipper_length_mm'].values
bodyMassG = pengData['body_mass_g'].values

mask1 = ~np.isnan(billLengthMM)
mask2 = ~np.isnan(flipperLengthMM)

Y = species[mask1 & mask2]
X = np.column_stack((billLengthMM[mask1 & mask2], flipperLengthMM[mask1 & mask2]))

D = {"Adelie":0, "Chinstrap":1, "Gentoo":2}
C = np.array([D[s] for s in Y])
print(C)

logreg = LogisticRegression(C=1e5)
logreg.fit(X, C)

_, ax = plt.subplots(figsize=(4, 3))
DecisionBoundaryDisplay.from_estimator(
    logreg,
    X,
    cmap=plt.cm.Paired,
    ax=ax,
    response_method="predict",
    plot_method="pcolormesh",
    shading="auto",
    xlabel="Sepal length",
    ylabel="Sepal width",
    eps=0.5,
)

plt.scatter(X[:, 0], X[:, 1], c=C, edgecolors="k", cmap= plt.cm.Paired)

matthews_corrcoef(C, logreg.predict(X))

pre = logreg.predict(X)

# def confuse(pre, C, confusion):
#   for pre, C in zip(pre, C):
#     confusion[C][pre] += 1
#   print(confusion)

cm = np.zeros((3, 3), dtype=int)

for C, pre in zip(C, pre):
    cm[C][pre] += 1

for i in range(3):
    for j in range(3):
        print(cm[i][j])